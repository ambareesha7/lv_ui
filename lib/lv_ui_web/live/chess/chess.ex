defmodule LvUiWeb.Live.Chess do
  require Logger
  use LvUiWeb, :live_view

  def mount(_params, _session, socket) do
    {:ok,
     socket
     |> assign(page_title: get_page_title(__MODULE__))}
  end

  def build_board(assigns) do
    ~H"""
    <div id="game_board" class="game_board grid grid-cols-8" phx-hook="ChessBoard">
      <div
        :for={{value, index} <- Enum.with_index(get_all_items(), 1)}
        id={"box_#{index}"}
        class={"box flex justify-center items-center w-[40px] h-[40px] #{add_box_color(index)}"}
      >
        <.svg_header
          :if={value != ""}
          class={"#{if index <= 16,do: "fill-slate-300"} #{if index >= 48, do: "fill-black"}"}
          id={"#{if index <= 16,do: "a"}#{if index >= 48, do: "b"}_#{value}_#{index}"}
        >
          <.icon_path icon={value} />
        </.svg_header>
      </div>
    </div>
    """
  end

  def main_row() do
    ["rook", "knight", "bishop", "king", "queen", "bishop", "knight", "rook"]
  end

  def get_all_items() do
    [main_row(), pawn("pawn"), pawn(), pawn(), pawn(), pawn(), pawn("pawn"), main_row()]
    |> List.flatten()
  end

  def pawn(value \\ "") do
    Enum.map(1..8, fn _e -> value end)
  end

  defp add_box_color(index) do
    row = Float.floor(63 - index / 8) + 1

    if Integer.mod(trunc(row), 2) == 0 do
      if(Integer.mod(index, 2) == 0, do: "bg-[#eeeed2]", else: "bg-[#769656]")
    else
      if(Integer.mod(index, 2) == 0, do: "bg-[#769656]", else: "bg-[#eeeed2]")
    end
  end

  def check_side_a_box(index) do
    if index <= 16, do: true, else: false
  end

  def get_icons(assigns) do
    %{
      "bishop" => bishop_svg(assigns),
      "king" => king_svg(assigns),
      "knight" => knight_svg(assigns),
      "pawn" => pawn_svg(assigns),
      "queen" => queen_svg(assigns),
      "rook" => rook_svg(assigns)
    }
  end

  def icon_path(assigns) do
    ~H"""
    <%= get_icons(assigns)[@icon] %>
    """
  end

  def bishop_svg(assigns) do
    ~H"""
    <path d="M37,40c0-1.1,0.9-2,2-2h22c1.1,0,2,0.9,2,2s-0.9,2-2,2H39C37.9,42,37,41.1,37,40z M34,84h32c1.1,0,2-0.9,2-2s-0.9-2-2-2H34
    c-1.1,0-2,0.9-2,2S32.9,84,34,84z M69,85H31c-2.2,0-4,1.8-4,4s1.8,4,4,4h38c2.2,0,4-1.8,4-4S71.2,85,69,85z M40.95,43
    c-0.358,27.588-2.586,30.262-3.528,36h25.156c-0.942-5.738-3.17-8.412-3.528-36H40.95z M59,37c0,0,4-6,4-11
    c0-4.411-10.112-13.488-12.496-19h-1.008c-0.871,2.015-2.776,4.506-4.842,7.072l4.24,8.48l-1.789,0.895l-3.834-7.668
    C40.1,19.686,37,23.558,37,26c0,5,4,11,4,11H59z" />
    """
  end

  def king_svg(assigns) do
    ~H"""
    <path d="M37,36c0-1.1,0.9-2,2-2h22c1.1,0,2,0.9,2,2s-0.9,2-2,2H39C37.9,38,37,37.1,37,36z M34,84h32c1.1,0,2-0.9,2-2s-0.9-2-2-2H34
    c-1.1,0-2,0.9-2,2S32.9,84,34,84z M69,85H31c-2.2,0-4,1.8-4,4s1.8,4,4,4h38c2.2,0,4-1.8,4-4S71.2,85,69,85z M37,20l0.615,2h24.77
    L63,20l-11-4.23V11h2V7h-2V5h-4v2h-2v4h2v4.77L37,20z M59,33l3.077-10H37.923L41,33H59z M40.973,39
    c-0.277,29.941-2.637,33.514-3.583,40H62.61c-0.946-6.486-3.306-10.059-3.583-40H40.973z" />
    """
  end

  def knight_svg(assigns) do
    ~H"""
    <path d="M31.375,40.219l1.249,1.563l-5.475,4.379C27.676,48.357,29.645,50,32,50c2.527,0,4.622-1.885,4.954-4.32l5.849-2.508
    c2.944,2.451,7.337,2.297,10.097-0.465c2.924-2.924,2.924-7.682,0-10.606l0.707-0.707c1.605,1.605,2.49,3.739,2.49,6.011
    c0,1.328-0.311,2.607-0.884,3.764l0,0c-0.196,0.396-0.425,0.775-0.681,1.14c-0.024,0.034-0.05,0.066-0.074,0.1
    c-0.256,0.353-0.536,0.692-0.851,1.007c-0.276,0.276-0.57,0.523-0.873,0.752c-0.07,0.053-0.143,0.101-0.213,0.15
    c-0.252,0.179-0.51,0.344-0.775,0.492c-1.508,0.844-3.216,1.203-4.894,1.057C45.944,52.158,40.545,57,34,57l2,22h28
    c0-9.957,2.698-18.563,5.535-25.822C64.908,57.412,58.751,60,52,60v-1c13.785,0,25-11.215,25-25S65.785,9,52,9h-1v10h-1v-4h-7
    c-3.866,0-7,3.134-7,7c0,1.831-16,7.76-16,16c0,3.38,2.395,6.199,5.58,6.855L31.375,40.219z M45.485,20.143l1.029,1.715l-5,3
    l-1.029-1.715L45.485,20.143z M23.445,38.168l3-2l1.109,1.664l-3,2L23.445,38.168z M69,80c1.1,0,2,0.9,2,2s-0.9,2-2,2H31
    c-1.1,0-2-0.9-2-2s0.9-2,2-2H69z M76,89c0,2.2-1.8,4-4,4H28c-2.2,0-4-1.8-4-4s1.8-4,4-4h44C74.2,85,76,86.8,76,89z" />
    """
  end

  def pawn_svg(assigns) do
    ~H"""
    <path d="M37,38c0-1.1,0.9-2,2-2h22c1.1,0,2,0.9,2,2s-0.9,2-2,2H39C37.9,40,37,39.1,37,38z M34,84h32c1.1,0,2-0.9,2-2s-0.9-2-2-2H34
    c-1.1,0-2,0.9-2,2S32.9,84,34,84z M69,85H31c-2.2,0-4,1.8-4,4s1.8,4,4,4h38c2.2,0,4-1.8,4-4S71.2,85,69,85z M50,35
    c7.18,0,13-5.82,13-13S57.18,9,50,9s-13,5.82-13,13S42.82,35,50,35z M58,41H42c0,33.478-4.052,33.959-5.99,38H63.99
    C62.052,74.959,58,74.478,58,41z" />
    """
  end

  def queen_svg(assigns) do
    ~H"""
    <path d="M63,36c0,1.1-0.9,2-2,2H39c-1.1,0-2-0.9-2-2s0.9-2,2-2h22C62.1,34,63,34.9,63,36z M34,84h32c1.1,0,2-0.9,2-2s-0.9-2-2-2H34
    c-1.1,0-2,0.9-2,2S32.9,84,34,84z M69,85H31c-2.2,0-4,1.8-4,4s1.8,4,4,4h38c2.2,0,4-1.8,4-4S71.2,85,69,85z M40.973,39
    c-0.277,29.941-2.637,33.514-3.583,40H62.61c-0.946-6.486-3.306-10.059-3.583-40H40.973z M34.965,23l3.89,10h22.291l3.89-10H34.965z
    M65.424,22l2.44-6.275l-3.729-1.449l-1.361,3.501c-1.851-0.886-5.641-1.543-10.218-1.724C53.432,15.318,54,14.23,54,13
    c0-2.209-1.791-4-4-4s-4,1.791-4,4c0,1.23,0.568,2.318,1.443,3.053c-4.577,0.181-8.367,0.838-10.218,1.724l-1.361-3.501
    l-3.729,1.449L34.576,22H65.424z" />
    """
  end

  def rook_svg(assigns) do
    ~H"""
    <path d="M31,25V10h7v6h6v-6h12v6h6v-6h7v15c0,2.2-1.8,4-4,4H35C32.8,29,31,27.2,31,25z M65,34c1.1,0,2-0.9,2-2s-0.9-2-2-2H35
    c-1.1,0-2,0.9-2,2s0.9,2,2,2H65z M30,84h40c1.1,0,2-0.9,2-2s-0.9-2-2-2H30c-1.1,0-2,0.9-2,2S28.9,84,30,84z M73,85H27
    c-2.2,0-4,1.8-4,4s1.8,4,4,4h46c2.2,0,4-1.8,4-4S75.2,85,73,85z M68.262,79C66.464,72.752,62,70.139,62,35H38
    c0,35.139-4.464,37.752-6.262,44H68.262z" />
    """
  end
end
